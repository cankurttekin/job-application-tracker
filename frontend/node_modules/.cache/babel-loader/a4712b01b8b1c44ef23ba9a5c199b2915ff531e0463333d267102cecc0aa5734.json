{"ast":null,"code":"var _jsxFileName = \"/home/cankurttekin/Documents/git/job-application-tracker-backend/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check for token in localStorage to set the initial state\n    const token = localStorage.getItem('token');\n    setIsLoggedIn(!!token);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      setIsLoggedIn\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n};\n\n/*\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n\n  // Check authentication status on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/login', credentials);\n      const { token } = response.data;\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login failed', error);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  return (\n      <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>\n        {children}\n      </AuthContext.Provider>\n  );\n};\n*/\n_s(AuthProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","token","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/cankurttekin/Documents/git/job-application-tracker-backend/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context\nexport const AuthContext = createContext();\n\n// Create a provider component\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    // Check for token in localStorage to set the initial state\n    const token = localStorage.getItem('token');\n    setIsLoggedIn(!!token);\n  }, []);\n\n  return (\n      <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn }}>\n        {children}\n      </AuthContext.Provider>\n  );\n};\n\n\n/*\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n\n  // Check authentication status on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/login', credentials);\n      const { token } = response.data;\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login failed', error);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  return (\n      <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>\n        {children}\n      </AuthContext.Provider>\n  );\n};\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3CH,aAAa,CAAC,CAAC,CAACC,KAAK,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEN,UAAU;MAAEC;IAAc,CAAE;IAAAH,QAAA,EACxDA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE7B,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CAX,EAAA,CAjBaF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}